<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
							 xmlns:s="library://ns.adobe.com/flex/spark"
							 xmlns:mx="library://ns.adobe.com/flex/mx"
							 xmlns:openzoom="org.openzoom.flex.components.*"
							 xmlns:controllers="org.openzoom.flash.viewport.controllers.*"
							 xmlns:constraints="org.openzoom.flash.viewport.constraints.*"
							 xmlns:transformers="org.openzoom.flash.viewport.transformers.*"
							 xmlns:archivesservice="services.archivesservice.*"
							 xmlns:valueObjects="valueObjects.*"
							 xmlns:controls="flexunit.flexui.controls.*"
							 xmlns:Group="Group.*"
							 minWidth="1000" minHeight="443"
							 applicationComplete="applicationCompleteHandler(event)" backgroundAlpha="0"
							 backgroundColor="black" currentState="Spider">
	<fx:Style source="maya.css"/>
	<fx:Script>
		<![CDATA[
			import com.adobe.serializers.utility.TypeUtility;

			import flash.events.Event;
			import flash.events.KeyboardEvent;
			import flash.ui.Keyboard;
			import flash.ui.Mouse;
			import flash.utils.setTimeout;

			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.ToolTip;
			import mx.core.IFlexDisplayObject;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.events.FlexMouseEvent;
			import mx.events.StateChangeEvent;
			import mx.managers.CursorManager;
			import mx.managers.PopUpManager;
			import mx.managers.ToolTipManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;

			import org.openzoom.flash.descriptors.IMultiScaleImageDescriptor;
			import org.openzoom.flash.descriptors.openzoom.OpenZoomDescriptor;
			import org.openzoom.flash.utils.FullScreenUtil;
			import org.openzoom.flash.viewport.controllers.KeyboardController;

			import spark.events.IndexChangeEvent;
			import spark.events.ListEvent;

			[Bindable]
			private var detail:ArrayCollection = new ArrayCollection;
			private var serial:String;
			
			private var page:Number = 0;
			private var totalpage:Number = 0;
			
			[Bindable]
			private var path:String;
			[Bindable]
			private var ptkpage:ArrayCollection = new ArrayCollection;
			private var pagestack:Array = new Array;

//			@todo goto first & end page
//			@todo show page number too
//			@todo update number of views
//			[SWF(frameRate="60")]
			private function applicationCompleteHandler(event:FlexEvent):void {

				//===Init Parameter===
				initParameter();

				//===FullScreen Listener===
				fullscreen.addEventListener(MouseEvent.CLICK, swapFullScreen);
				stage.addEventListener(FullScreenEvent.FULL_SCREEN, onFullScreenHandler);

				checkCurrentState();

				addEventListener(FlexEvent.STATE_CHANGE_COMPLETE, onChangeState);
			}
			private function initParameter():void {
				if(currentState == "Spider"){
					//===Spider State Parameter===
					pointer.selected = true;
					pointer.toolTip = "Hide List Panel";
					playme.selected = true;
					playme.toolTip = "Hide Intro Panel";
					showbt.enabled = false;
					showbt.toolTip = "View Ancient Lanna Manuscripts (Potthaka)";
					detailbt.enabled = false;
					detailbt.toolTip = "View Metadata of Ancient Lanna Manuscripts (Potthaka)";

				}
			}
			private function onChangeState(event:FlexEvent):void{
				checkCurrentState();
			}

			private function checkCurrentState():void {
				if(currentState == "Spider"){
					//===Spider State Only===

					pointer.addEventListener(MouseEvent.CLICK, toggleBoard);
					playme.addEventListener(MouseEvent.CLICK, toggleIntro);

					//===Select Archives Listener===

				}else	if(currentState == "Web"){
					//===Web State Only===
					webhelp.selected = false;
					navhelp.visible = false;
					webpin.selected = true;
					webpin.toolTip = "Unpin Button";
					onebt.toolTip = "Go First Page";
					endbt.toolTip = "Go Last Page";
					webhelp.toolTip = "Show Help Panel";
					web2prey.toolTip = "View Detail";
					web2spider.toolTip = "Back Home";
					initWeb();

					paginator.addEventListener(Event.CHANGE, goPage);
					webhelp.addEventListener(MouseEvent.CLICK, toggleHelp);
					webpin.addEventListener(MouseEvent.CLICK, togglePin);
					nav.navclosebt.addEventListener(MouseEvent.CLICK, navclosebt_clickHandler);

					image.addEventListener(MouseEvent.CLICK,
						image_clickHandler,
						false, 0, true);

					out.text = page.toString();
					upbt.addEventListener(MouseEvent.CLICK, upHandler);
					downbt.addEventListener(MouseEvent.CLICK, downHandler);
					onebt.addEventListener(MouseEvent.CLICK, oneHandler);
					endbt.addEventListener(MouseEvent.CLICK, endHandler);

					image.addEventListener(MouseEvent.CLICK, flipHandler);

				}else if (currentState == "Prey"){
					//===Prey State Only===
					prey2spider.toolTip = "Back Home";
					prey2web.toolTip = "View Archives";
					checkTotalPage();
				}
			}
			//===Spider State Only===
			private function toggleBoard(event:MouseEvent):void {
				if(pointer.selected){
					board.setVisible(true) ;
					pointer.toolTip = "Hide List Panel";
				}else{
					board.setVisible(false);
					pointer.toolTip = "Show List Panel";
				}
			}
			private function toggleIntro(event:MouseEvent):void {
				if(playme.selected){
					introme.setVisible(true) ;
					playme.toolTip = "Hide Intro Panel";
				}else{
					introme.setVisible(false);
					playme.toolTip = "Show Intro Panel";
				}
			}

			//===FullScreen Handler===
			private function swapFullScreen(event:MouseEvent):void {
				switchFullScreen();
			}
			private function switchFullScreen():void {

				if(stage.displayState == "normal"){
					stage.displayState = "fullScreen";
					fullscreen.toolTip = "Normal Screen";
					fullscreen.selected = true;
				}else{
					stage.displayState = "normal";
					fullscreen.toolTip = "Full Screen";
					fullscreen.selected = false;
				}
			}
			//fix press esc button to change fullscreen button
			private function onFullScreenHandler(event:FullScreenEvent):void {
				if(event.fullScreen){
					fullscreen.toolTip = "Normal Screen";
					fullscreen.selected = true;
				}else{
					fullscreen.toolTip = "Full Screen";
					fullscreen.selected = false;
				}
			}

			//===Web State Only===
			private function initWeb():void{
				if(page == 0){
					downbt.enabled = false;
					onebt.enabled = false;
					upbt.enabled = true;
					endbt.enabled = true;
				}
				if(page == totalpage-1){
					upbt.enabled = false;
					endbt.enabled = false;
					downbt.enabled = true;
					onebt.enabled = true;
				}
				paginator.stepSize = 1;
				paginator.minimum = 1;
				paginator.maximum = totalpage;
				paginator.value = page+1;
				pageof.text = "/"+totalpage;
			}
			private function goPage(event:Event):void{
				page = paginator.value-1;
				if(page < totalpage && page >= 0){
					path = pagestack[page];
					if(page != 0 && onebt.enabled == false){
						downbt.enabled = true;
						onebt.enabled = true;
					}
					if(page != totalpage && endbt.enabled == false){
						upbt.enabled = true;
						endbt.enabled = true;
					}
					if(page == totalpage-1){
						upbt.enabled = false;
						endbt.enabled = false;
					}
					if(page == 0){
						downbt.enabled = false;
						onebt.enabled = false;
					}
				}
			}

			private function flipHandler(event:MouseEvent):void{
				if(mouse.directionDrag == "up"){
					nextPage();
				}
				if(mouse.directionDrag == "down"){
					prevPage();
				}
//				out.text =
//					mouse.stopPosition.toString()
//					+ "\n" + mouse.startPosition.toString()
//					+ "\n" + mouse.resPosition
//					+ "\n" + mouse.directionDrag
//				  + "\n" + page;
			}

			private function nextPage():void{
				if(page+1 < totalpage && page >= 0){
					page++;
					paginator.value = page+1;
					path = pagestack[page];
					if(page != 0 && onebt.enabled == false){
						downbt.enabled = true;
						onebt.enabled = true;
					}
				}
				if(page == totalpage-1){
					upbt.enabled = false;
					endbt.enabled = false;
				}
			}

			private function prevPage():void {
				if(page <= totalpage && page > 0){
					page--;
					paginator.value = page+1;
					path = pagestack[page];
					if(page != totalpage && endbt.enabled == false){
						upbt.enabled = true;
						endbt.enabled = true;
					}
				}
				if(page == 0){
					downbt.enabled = false;
					onebt.enabled = false;
				}
			}

			private function upHandler(event:MouseEvent):void {
				mouse.directionDrag = "up";
				flipHandler(event);
			}
			private function downHandler(event:MouseEvent):void {
				mouse.directionDrag = "down";
				flipHandler(event);
			}
			private function oneHandler(event:MouseEvent):void {
				if(page != 0){
					page = 0;
					paginator.value = page+1;
					path = pagestack[page];
					onebt.enabled = false;
					downbt.enabled = false;
				}
				if(page == 0){
					endbt.enabled = true;
					upbt.enabled = true;
				}
			}
			private function endHandler(event:MouseEvent):void {
				if(page != totalpage-1){
					page = totalpage-1;
					paginator.value = page+1;
					path = pagestack[page];
					endbt.enabled = false;
					upbt.enabled = false;
				}
				if(page == totalpage-1){
					onebt.enabled = true;
					downbt.enabled = true;
				}
			}

			protected function togglePin(event:MouseEvent):void{
				if(webpin.selected){
					pagepane.visible = true;
					pageofpane.visible = true;
					webhelp.visible = true;
					mainpane.visible = true;
					webpin.toolTip = "Unpin Button";
				}else{
					pagepane.visible = false;
					pageofpane.visible = false;
					webhelp.visible = false;
					if(navhelp.visible){
						navhelp.visible = false;
					}
					mainpane.visible = false;
					webpin.toolTip = "Pin Button";
				}
			}
			protected function toggleHelp(event:MouseEvent):void{
				if(webhelp.selected){
					navhelp.visible = true;
					webhelp.toolTip = "Hide Help Panel";
				}else{
					navhelp.visible = false;
					webhelp.toolTip = "Show Help Panel";
				}
			}

			protected function navclosebt_clickHandler(event:MouseEvent):void {
				navhelp.visible = false;
				webhelp.selected = false;
			}

			private function image_clickHandler(event:MouseEvent):void {
 				var componentPoint:Point = image.globalToLocal(new Point(event.stageX, event.stageY))
				trace("Click coordinates in component coordinates:", componentPoint)
				var scenePoint:Point = image.localToScene(componentPoint)

				// Remember: Scene dimensions != image dimensions (scene currently
				// has largest dimension == 16384 (2^14) for best rendering in Flash
				// Player, might change in the future, though).
				// Always normalize (map to [0, 1]) to scene through division by
				// scene dimensions (scene.sceneWidth & scene.sceneHeight) and
				// then map to image coordinates through multiplication with
				// descriptor dimensions (image.source.width & image.source.height)

 				var descriptor:IMultiScaleImageDescriptor = image.source as IMultiScaleImageDescriptor
				if (descriptor)
				{
					var imagePoint:Point = scenePoint.clone()
					imagePoint.x /= image.sceneWidth
					imagePoint.y /= image.sceneHeight
					imagePoint.x *= descriptor.width
					imagePoint.y *= descriptor.height

					if (0 <= imagePoint.x && imagePoint.x <= descriptor.width &&
						0 <= imagePoint.y && imagePoint.y <= descriptor.height)
					{
						trace("Yay, you've clicked inside the image!")
						trace("Click coordinates in scene coordinates:", scenePoint)
						trace("Click coordinates in image coordinates:", imagePoint)
					}
				}
			}			
			
			protected function web2prey_clickHandler(event:MouseEvent):void {
				updateDetailView.token = archivesService.updateDetailView(serial);
				currentState='Prey';
			}

			//===Prey State Only===
			protected function prey2web_clickHandler(event:MouseEvent):void {
				path = pagestack[page];
				updatePotthakaView.token = archivesService.updatePotthakaView(serial);
				currentState='Web';
			}

			//===Spider State Only===
			private function getSerialItem():void {
				if(ptklist.selectedItem == undefined){
					showbt.enabled = false;
					detailbt.enabled = false;
					getPotthakaResult.removeEventListener(ResultEvent.RESULT, ptkpage_resultHandler);
				}else if(ptklist.selectedItem != undefined){
					detailbt.enabled = true;
					getPotthakaResult.addEventListener(ResultEvent.RESULT, ptkpage_resultHandler);
					var serialcut:Array = ptklist.selectedItem.split(" ");
					serial = serialcut[0];
					serialcut = null;
				}
			}
			protected function showallCB_changeHandler(event:Event):void {
				if(showall.selected){
					getPotthakaListResult.token = archivesService.getPotthakaList(true);
				}else{
//					ptklist.selectedItem = undefined;
					getPotthakaListResult.token = archivesService.getPotthakaList(false);
				}
			}
			protected function ptklist_creationCompleteHandler(event:FlexEvent):void {
				getPotthakaListResult.token = archivesService.getPotthakaList(false);
			}
			protected function showbt_clickHandler(event:MouseEvent):void{
				path = pagestack[page];
				updatePotthakaView.token = archivesService.updatePotthakaView(serial);
				currentState='Web';
			}
			protected function detailbt_clickHandler(event:MouseEvent):void{
				updateDetailView.token = archivesService.updateDetailView(serial);
				currentState='Prey';
			}
			protected function ptkpage_resultHandler(event:ResultEvent):void{
				ptkpage = event.result as ArrayCollection;
				totalpage = ptkpage.source.length;
				trace(totalpage);
				checkTotalPage();
			}
			private function checkTotalPage():void{
				if(totalpage > 0){
					var run:Number = 0;
					pagestack = [];
					for each (var x:PtkPageDatatype in ptkpage){
						//pagestack for web state
						pagestack[run] = x.OriginalFilePath;
						run++;
					}
					showbt.enabled = true;
					if(currentState == "Prey"){
						prey2web.enabled = true;
					}
				}
				else if(totalpage == 0){
					showbt.enabled = false;
					if(currentState == 'Prey')
						prey2web.enabled = false;
				}
			}
			protected function ptklist_changeHandler(event:IndexChangeEvent):void {
				page = 0;
				getSerialItem();
				getPotthakaResult.token = archivesService.getPotthaka(serial);
				getPotthakaDetailResult.token = archivesService.getPotthakaDetail(serial);
			}
			
		]]>
	</fx:Script>
	<s:states>
		<s:State name="Web"/>
		<s:State name="Spider"/>
		<s:State name="Prey"/>
	</s:states>
	<fx:Declarations>
		<s:Sequence id="hideout" >
			<s:Fade alphaFrom="1" alphaTo="0"/>
		</s:Sequence>
		<s:Sequence id="showoff" >
			<s:Fade alphaFrom="0" alphaTo="1"/>
		</s:Sequence>
		<valueObjects:PtkPageDatatype id="ptkpageDatatype"/>
		<s:CallResponder id="getPotthakaResult"/>
		<s:CallResponder id="getPotthakaListResult"/>

		<valueObjects:ArchivesDatatype id="archivesDatatype"/>
		<s:CallResponder id="getPotthakaDetailResult"
					result="archivesDatatype = getPotthakaDetailResult.lastResult[0] as ArchivesDatatype"/>

		<s:CallResponder id="updatePotthakaView"/>
		<s:CallResponder id="updateDetailView"/>

		<archivesservice:ArchivesService id="archivesService" endpoint="http://insider.heliohost.org/maya/gateway.php"
																		 fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)"
																		 showBusyCursor="true" />
	</fx:Declarations>
	<s:layout.Spider>
		<s:BasicLayout />
	</s:layout.Spider>
	<s:layout.Web>
		<s:BasicLayout />
	</s:layout.Web>

	<!--Web State Only-->
	<openzoom:MultiScaleImage id="image" includeIn="Web" left="0" right="0" top="0" bottom="0"
														source="{path}">
		<openzoom:transformer>
			<transformers:TweensyZeroTransformer/>
		</openzoom:transformer>
		<openzoom:controllers>
			<controllers:ContextMenuController/>
			<controllers:MouseController id="mouse" />
			<controllers:KeyboardController/>
		</openzoom:controllers>
		<openzoom:constraint>
			<constraints:CompositeConstraint>
				<constraints:ZoomConstraint maxZoom="8" minZoom="1"/>
				<constraints:CenterConstraint />
			</constraints:CompositeConstraint>
		</openzoom:constraint>
	</openzoom:MultiScaleImage>

	<s:Button id="upbt" includeIn="Web" top="-1" width="250" horizontalCenter="0" skinClass="Skin.Next"
						toolTip="Next Page"/>
	<s:Button id="downbt" includeIn="Web" bottom="-1" width="250" horizontalCenter="0"
						skinClass="Skin.Prev" toolTip="Previous Page"/>
	<s:TextArea id="out" includeIn="Web" visible="false" left="58" bottom="1" width="187" height="102"
							editable="true"/>

	<s:BorderContainer id="navhelp" includeIn="Web" right="5" top="5" bottom="5" width="350"
										 cornerRadius="3">
		<s:Scroller left="0" right="0" top="0" bottom="0">
			<s:Group width="100%" height="100%">
				<Group:NavHelp id="nav"/>
			</s:Group>
		</s:Scroller>
	</s:BorderContainer>
	<s:HGroup id="pagepane" includeIn="Web" left="116" top="0" width="185" height="58" gap="5"
						hideEffect="{hideout}" paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5"
						showEffect="{showoff}">
		<s:Button id="onebt" includeIn="Web" width="48" height="48" skinClass="Skin.One"/>
		<s:Button id="endbt" includeIn="Web" width="48" height="48" skinClass="Skin.End"/>
		<s:NumericStepper id="paginator" includeIn="Web" width="74" height="48" fontSize="24"
											skinClass="Skin.Paginator"/>
	</s:HGroup>
	<s:HGroup id="pinpane" includeIn="Web" left="58" top="0" width="58" height="58" gap="5"
						paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5">
		<s:ToggleButton id="webpin" width="48" height="48" click="togglePin(event)"
										skinClass="Skin.ArchorWebToggleButton"/>
	</s:HGroup>
	<s:HGroup id="pageofpane" includeIn="Web" left="300" top="0" width="69" height="58"
						hideEffect="{hideout}" paddingLeft="0" paddingTop="6" showEffect="{showoff}">
		<s:Label id="pageof" includeIn="Web" width="67" height="46" backgroundColor="#FFFFFF"
						 fontSize="24" verticalAlign="middle"/>
	</s:HGroup>

	<s:VGroup id="helppane" includeIn="Web" x="0" y="0" left="0" bottom="0" width="58" height="58"
						gap="5" hideEffect="{hideout}" horizontalAlign="left" paddingBottom="5" paddingLeft="5"
						paddingTop="5" showEffect="{showoff}">
		<s:ToggleButton id="webhelp" includeIn="Web" width="48" height="48"
										click="toggleHelp(event)" skinClass="Skin.HelpToggleButton"/>
	</s:VGroup>

	<!--Prey State Only-->
	<s:BorderContainer includeIn="Prey" left="58" right="5" top="5" bottom="5">

		<s:Scroller left="0" right="0" top="0" bottom="0">
			<s:VGroup width="100%" height="100%">
				<s:Form id="detailform" left="0" top="0" bottom="38" width="913" fontSize="14">
					<s:layout>
						<s:VerticalLayout paddingBottom="-10" paddingLeft="-10" paddingTop="-10"/>
					</s:layout>

					<s:VGroup left="-5" top="0" width="904" height="700" gap="0">
						<s:HGroup width="864" gap="-10" paddingLeft="-10">
							<s:FormItem width="133" label="Serial">
								<s:TextInput id="serialTI" width="70" editable="false"
														 text="{archivesDatatype.Serial}" />
							</s:FormItem>
							<s:FormItem width="317" label="Title">
								<s:TextInput id="titleTI" width="260" editable="false"
														 text="{archivesDatatype.Title}"/>
							</s:FormItem>
							<s:FormItem width="260" label="Version">
								<s:TextInput id="versionTI" width="177" editable="false"
														 text="{archivesDatatype.Version}"/>
							</s:FormItem>
							<s:FormItem width="139" label="Period">
								<s:TextInput id="periodTI" width="62" editable="false"
														 text="{archivesDatatype.Period}" />
							</s:FormItem>
						</s:HGroup>
						<s:HGroup width="536" gap="-10" paddingLeft="-10">
							<s:FormItem width="236" label="Type">
								<s:TextInput id="typeTI" width="168" editable="false"
														 text="{archivesDatatype.Type}" />
							</s:FormItem>
							<s:FormItem width="296" label="SubType">
								<s:TextInput id="subtypeTI" width="199" editable="false"
														 text="{archivesDatatype.SubType}" />
							</s:FormItem>
						</s:HGroup>
						<s:HGroup width="815" gap="-10" paddingLeft="-10">
							<s:FormItem width="236" label="Format">
								<s:TextInput id="formatTI" width="152" editable="false"
														 text="{archivesDatatype.Format}" />
							</s:FormItem>
							<s:FormItem width="185" label="Total Page">
								<s:TextInput id="totalpageTI" width="75" editable="false"
														 text="{archivesDatatype.TotalPage}" />
							</s:FormItem>
							<s:FormItem width="147" label="Volume">
								<s:TextInput id="volTI" width="60" editable="false"
														 text="{archivesDatatype.Volume}" />
							</s:FormItem>
							<s:FormItem width="183" label="Total Volume">
								<s:TextInput id="totalvolTI" width="60" editable="false"
														 text="{archivesDatatype.TotalVolume}" />
							</s:FormItem>
						</s:HGroup>
						<s:HGroup width="829" gap="-10" paddingLeft="-10">
							<s:FormItem width="586" label="Format Note">
								<s:TextInput id="fnoteTI" width="471" editable="false"
														 text="{archivesDatatype.FNote}" />
							</s:FormItem>
							<s:FormItem width="242" label="Publisher">
								<s:TextInput id="publisherTI" width="150" editable="false"
														 text="{archivesDatatype.Publisher}" />
							</s:FormItem>
						</s:HGroup>
						<s:HGroup width="880" gap="-10" paddingLeft="-10">
							<s:FormItem width="884" label="Footnote">
								<s:TextArea id="footnoteTA" width="731" height="60" editable="false" lineBreak="toFit"
														text="{archivesDatatype.Footnote}"/>
							</s:FormItem>

						</s:HGroup>
						<s:HGroup width="491" gap="-10" paddingLeft="-10">
							<s:FormItem width="244" label="Place">
								<s:TextInput id="placeTI" width="171" editable="false"
														 text="{archivesDatatype.Place}" />
							</s:FormItem>
							<s:FormItem width="246" label="District">
								<s:TextInput id="districtTI" width="158" editable="false"
														 text="{archivesDatatype.District}" />
							</s:FormItem>
						</s:HGroup>
						<s:HGroup width="480" gap="-10" paddingLeft="-10">
							<s:FormItem width="245" label="City">
								<s:TextInput id="cityTI" width="178" editable="false"
														 text="{archivesDatatype.City}" />
							</s:FormItem>
							<s:FormItem width="240" label="Province">
								<s:TextInput id="proviceTI" width="150" editable="false"
														 text="{archivesDatatype.Province}"/>
							</s:FormItem>
						</s:HGroup>
						<s:HGroup width="634" gap="-10" paddingLeft="-10">
							<s:FormItem width="228" label="DateCreated">
								<s:TextInput id="datecreatedTI" width="80" editable="false"
														 text="{archivesDatatype.DateCreated}" />
							</s:FormItem>
							<s:FormItem width="211" label="DateDigitized">
								<s:TextInput id="datedigitizedTI" width="80" editable="false"
														 text="{archivesDatatype.DateDigitized}"/>
							</s:FormItem>
							<s:FormItem width="205" label="DateInscribe">
								<s:TextInput id="dateinscribeTI" width="80" editable="false"
														 text="{archivesDatatype.DateInscribe}"/>
							</s:FormItem>
						</s:HGroup>
						<s:HGroup width="662" gap="-10" paddingLeft="-10">
							<s:FormItem width="227" label="DateMicrofilmed">
								<s:TextInput id="datemicrofilmedTI" width="80" editable="false"
														 text="{archivesDatatype.DateMicrofilmed}"/>
							</s:FormItem>
							<s:FormItem width="211" label="DateModified">
								<s:TextInput id="datemodifiedTI" width="80" editable="false"
														 text="{archivesDatatype.DateModified}" />
							</s:FormItem>
							<s:FormItem width="208" label="DateSurveyed">
								<s:TextInput id="datesurveyedTI" width="80" editable="false"
														 text="{archivesDatatype.DateSurveyed}"/>
							</s:FormItem>
						</s:HGroup>
						<s:HGroup width="904" gap="-10" paddingLeft="-10">
							<s:FormItem width="308" label="Owner">
								<s:TextArea id="ownTA" width="210" height="60" editable="false"
														lineBreak="toFit" text="{archivesDatatype.Owner}"/>
							</s:FormItem>
							<s:FormItem width="286" label="Author">
								<s:TextArea id="authorTA" width="210" height="60" editable="false"
														lineBreak="toFit" text="{archivesDatatype.Author}"/>
							</s:FormItem>
							<s:FormItem width="337" label="Potthaka Editor">
								<s:TextArea id="editorTA" width="210" height="60" editable="false"
														lineBreak="toFit" text="{archivesDatatype.Editor}"/>
							</s:FormItem>
						</s:HGroup>
						<s:HGroup width="902" gap="-10" paddingLeft="-10">
							<s:FormItem width="304" label="Character">
								<s:TextArea id="characterTA" width="210" height="60" editable="false"
														lineBreak="toFit" text="{archivesDatatype.Character}"/>
							</s:FormItem>
							<s:FormItem width="306" label="Language">
								<s:TextArea id="languageTA" width="210" height="60" editable="false"
														lineBreak="toFit" text="{archivesDatatype.Language}"/>
							</s:FormItem>
							<s:FormItem width="322" label="Potthaka Note">
								<s:TextArea id="vnoteTA" width="210" height="60" editable="false" lineBreak="toFit"
														text="{archivesDatatype.VNote}"/>
							</s:FormItem>
						</s:HGroup>
						<s:HGroup width="805" gap="-10" paddingLeft="-10">
							<s:FormItem width="341" label="Story">
								<s:TextArea id="storyTA" width="210" height="60" editable="false" lineBreak="toFit"
														text="{archivesDatatype.Story}"/>
							</s:FormItem>
							<s:FormItem width="262" label="Tag">
								<s:TextArea id="tagTA" width="210" height="60" editable="false" lineBreak="toFit"
														text="{archivesDatatype.Tag}"/>
							</s:FormItem>
						</s:HGroup>
					</s:VGroup>
				</s:Form>

			</s:VGroup>
		</s:Scroller>
	</s:BorderContainer>

	<!--Spider State Only-->
	<s:BorderContainer id="board" x="57" top="5" bottom="5" width="340"	 includeIn="Spider" cornerRadius="2">
		<s:VGroup left="0" right="0" top="0" bottom="360" gap="5" horizontalAlign="center"
							paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5" verticalAlign="top">
			<s:HGroup includeIn="Spider" width="190" height="35" gap="15" horizontalAlign="center"
								paddingLeft="0" paddingTop="5" verticalAlign="top">
				<s:Button id="showbt" height="25" label="Show" click="showbt_clickHandler(event)"/>
				<s:Button id="detailbt" height="25" label="Detail" click="detailbt_clickHandler(event)"/>
			</s:HGroup>
			<s:CheckBox id="showall" label="Show all" change="showallCB_changeHandler(event)"/>
		</s:VGroup>
		<s:List id="ptklist" includeIn="Spider" top="70" bottom="10" width="320"
						change="ptklist_changeHandler(event)"
						creationComplete="ptklist_creationCompleteHandler(event)" horizontalCenter="0">
			<s:AsyncListView list="{getPotthakaListResult.lastResult}"/>
		</s:List>
	</s:BorderContainer>

	<!--All State-->
	<s:VGroup id="mainpane" left="0" top="0" width="58" height="165" gap="5" horizontalAlign="left"
						paddingLeft="5" paddingTop="5"
						hideEffect.Web="{hideout}" showEffect.Web="{showoff}">

		<!--All State-->
		<s:ToggleButton id="fullscreen" left="5" top="5" width="48"
										skinClass="Skin.Fullscreen" toolTip="Full Screen"/>

		<!--Spider State Only-->
		<s:ToggleButton id="pointer" includeIn="Spider" left="5" width="48" height="48"
										skinClass="Skin.ListToggleButton"/>
		<s:ToggleButton id="playme" includeIn="Spider" width="48" height="48"
										skinClass="Skin.IntroToggleButton"/>

		<!--Web State Only-->
		<s:Button id="web2spider" includeIn="Web" left="5" width="48" height="48"
							click="currentState='Spider'" skinClass="Skin.HomeButton"/>
		<s:Button id="web2prey" includeIn="Web" left="5" width="48" height="48"
							click="web2prey_clickHandler(event)" skinClass="Skin.TreeButton"/>

		<!--Prey State Only-->
		<s:Button id="prey2spider" includeIn="Prey" left="5" width="48" height="48"
							click="currentState='Spider'" skinClass="Skin.HomeButton"/>
		<s:Button id="prey2web" includeIn="Prey" left="5" width="48" height="48"
							click="prey2web_clickHandler(event)" skinClass="Skin.FlyButton"/>
	</s:VGroup>
	<s:BorderContainer id="introme" includeIn="Spider" left="400" right="5" top="5" bottom="5">
		<s:BitmapImage left="0" top="5" width="128" height="128" horizontalCenter="0"
									 source="@Embed('../assets/button/flower512.png')"/>
		<s:BitmapImage left="328" bottom="20" width="100" height="100" horizontalCenter="-80"
									 source="@Embed('../assets/button/logo-cs.png')"/>
		<s:BitmapImage left="192" bottom="5" width="128" height="128" horizontalCenter="80"
									 source="@Embed('../assets/button/cmu.png')"/>
		<s:Label id="projectname" top="145" fontFamily="Servus" fontSize="36" fontWeight="normal"
						 horizontalCenter="0" text="Potthaka Project"/>
		<s:Label id="devoloperby" top="200" fontFamily="Kinnari" fontSize="25" horizontalCenter="0"
						 text="By Jarutphong Somsiri 4805644"/>
		<s:Label id="supportby" bottom="145" fontFamily="Kinnari" fontSize="25" horizontalCenter="0"
						 text="Copyright &amp; Support By"/>
	</s:BorderContainer>

</s:Application>